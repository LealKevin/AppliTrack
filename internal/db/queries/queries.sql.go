// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOneApplication = `-- name: CreateOneApplication :one
INSERT INTO applications ( title_application, company, sent_date, status, notes, url_application, user_id ) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, title_application, company, sent_date, status, notes, url_application, user_id, created_at, updated_at
`

type CreateOneApplicationParams struct {
	TitleApplication string
	Company          string
	SentDate         pgtype.Date
	Status           pgtype.Text
	Notes            pgtype.Text
	UrlApplication   pgtype.Text
	UserID           int32
}

func (q *Queries) CreateOneApplication(ctx context.Context, arg CreateOneApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createOneApplication,
		arg.TitleApplication,
		arg.Company,
		arg.SentDate,
		arg.Status,
		arg.Notes,
		arg.UrlApplication,
		arg.UserID,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.TitleApplication,
		&i.Company,
		&i.SentDate,
		&i.Status,
		&i.Notes,
		&i.UrlApplication,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOneApplicationByID = `-- name: DeleteOneApplicationByID :one
DELETE FROM applications WHERE id = $1 RETURNING id, title_application, company, sent_date, status, notes, url_application, user_id, created_at, updated_at
`

func (q *Queries) DeleteOneApplicationByID(ctx context.Context, id int32) (Application, error) {
	row := q.db.QueryRow(ctx, deleteOneApplicationByID, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.TitleApplication,
		&i.Company,
		&i.SentDate,
		&i.Status,
		&i.Notes,
		&i.UrlApplication,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllApplications = `-- name: GetAllApplications :many
SELECT id, title_application, company, sent_date, status, notes, url_application, user_id, created_at, updated_at FROM applications
`

func (q *Queries) GetAllApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.Query(ctx, getAllApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.TitleApplication,
			&i.Company,
			&i.SentDate,
			&i.Status,
			&i.Notes,
			&i.UrlApplication,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneApplicationByID = `-- name: GetOneApplicationByID :one
SELECT id, title_application, company, sent_date, status, notes, url_application, user_id, created_at, updated_at FROM applications WHERE id = $1
`

func (q *Queries) GetOneApplicationByID(ctx context.Context, id int32) (Application, error) {
	row := q.db.QueryRow(ctx, getOneApplicationByID, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.TitleApplication,
		&i.Company,
		&i.SentDate,
		&i.Status,
		&i.Notes,
		&i.UrlApplication,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
